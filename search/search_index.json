{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Devopbros","text":""},{"location":"Progress/00%20-%20Installing%20Python%20and%20setting%20up%20venv/","title":"Installing python and setting up venv","text":""},{"location":"Progress/00%20-%20Installing%20Python%20and%20setting%20up%20venv/#python-installation-and-virtual-environment-setup-on-windows","title":"\ud83d\udc0d Python Installation and Virtual Environment Setup on Windows","text":""},{"location":"Progress/00%20-%20Installing%20Python%20and%20setting%20up%20venv/#installing-python-on-windows","title":"\ud83d\udd27 Installing Python on Windows","text":"<p>To begin using Python in a controlled and reproducible way on Windows, it is essential to install the language properly and set up the environment so that it works seamlessly from the command line.</p> <p>The installation process starts by downloading the official installer from python.org. One should select the latest stable release compatible with their system (usually the 64-bit installer). Upon launching the installer, it's critical to check the option \"Add Python to PATH\" before proceeding. This ensures that the Python interpreter can be invoked from any terminal window. Then, click on \"Customize installation\" and proceed with default settings, or specify the desired installation directory. After installation, click on \"Disable path length limit\" if prompted, as this allows the use of deep directory structures in projects.</p>"},{"location":"Progress/00%20-%20Installing%20Python%20and%20setting%20up%20venv/#verifying-installation-and-checking-version","title":"\ud83e\uddea Verifying Installation and Checking Version","text":"<p>Once installed, Python can be verified by opening the Command Prompt and typing:</p> <pre><code>python --version\n</code></pre> <p>This should output something like:</p> <pre><code>Python 3.12.2\n</code></pre> <p>If the command is not recognized, then either Python was not added to the system's <code>PATH</code>, or the system environment variables were misconfigured.</p>"},{"location":"Progress/00%20-%20Installing%20Python%20and%20setting%20up%20venv/#correcting-path-manually-if-needed","title":"\u2699\ufe0f Correcting PATH Manually (if needed)","text":"<p>To fix the <code>PATH</code>, navigate to System Properties \u2192 Environment Variables. Under either User Variables or System Variables, find the entry named <code>Path</code> and click Edit. Then add the paths corresponding to the Python installation and its Scripts directory. These are typically:</p> <pre><code>C:\\Users\\&lt;yourname&gt;\\AppData\\Local\\Programs\\Python\\Python3x\\\nC:\\Users\\&lt;yourname&gt;\\AppData\\Local\\Programs\\Python\\Python3x\\Scripts\\\n</code></pre> <p>Once added, click OK on all dialogs and restart the terminal. Running <code>python --version</code> again should now show the correct output.</p>"},{"location":"Progress/00%20-%20Installing%20Python%20and%20setting%20up%20venv/#what-is-venv","title":"\ud83e\uddf0 What is <code>venv</code>?","text":"<p><code>venv</code> stands for Virtual Environment, and it is a built-in Python module introduced in version 3.3. It provides a mechanism to create a lightweight, self-contained, and isolated Python environment within a directory. This environment includes its own Python interpreter and a copy of the standard <code>pip</code> installer, allowing users to install packages locally within the environment rather than globally on the system.</p> <p>This isolation is crucial for modern software development. In practice, many Python projects depend on specific versions of third-party libraries. Installing all dependencies globally can quickly lead to version conflicts between projects. For instance, one project might require <code>Django 3.2</code> while another demands <code>Django 4.0</code>. By using <code>venv</code>, each project can maintain its own independent set of packages, preventing such collisions and ensuring reproducibility.</p> <p>Furthermore, when using virtual environments, developers can safely experiment, upgrade, or downgrade packages without affecting system-wide installations or other projects. The environment also acts as a reproducible context: if one exports the list of dependencies via <code>pip freeze &gt; requirements.txt</code>, then any other machine can reconstruct the same environment using that file and <code>pip install -r requirements.txt</code>.</p>"},{"location":"Progress/00%20-%20Installing%20Python%20and%20setting%20up%20venv/#installing-and-activating-venv","title":"\ud83d\udce6 Installing and Activating <code>venv</code>","text":"<p>To create a virtual environment, navigate to your project directory and run:</p> <pre><code>python -m venv venv\n</code></pre> <p>This creates a folder named <code>venv/</code> containing the environment. To activate it on Windows:</p> <pre><code>venv\\Scripts\\activate\n</code></pre> <p>Once activated, the prompt will change to show <code>(venv)</code>, indicating that the shell is now using the virtual environment. All subsequent <code>pip install</code> commands will affect only this environment.</p>"},{"location":"Progress/00%20-%20Installing%20Python%20and%20setting%20up%20venv/#managing-dependencies-with-requirementstxt","title":"\ud83d\udcdc Managing Dependencies with <code>requirements.txt</code>","text":"<p>After installing necessary packages within the environment, you can export them:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>This <code>requirements.txt</code> file serves as a manifest of all installed dependencies and their exact versions. On any other system, the same environment can be recreated by running:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>This guarantees consistency across development, testing, and deployment environments.</p>"},{"location":"Progress/Linux/Curious%20Case%20of%20-wx%20permission/","title":"Curious Case of  wx permission","text":"<p>\ud83d\udd12 The Curious Case of <code>-wx</code> Directory Permissions: Building a Secure Dropbox-like Folder in Linux</p> <p>In Unix-like systems, file and directory permissions are incredibly versatile. One of the most underappreciated yet powerful combinations is the <code>-wx</code> permission on a directory\u2014a setup that allows users to create or remove files within a directory without being able to see what\u2019s inside it. This configuration is ideal for implementing secure \u201cdropboxes,\u201d such as user upload folders, shared message sinks, or homework submission bins.</p> <p>Let\u2019s take a deep dive into this permission setup: how it works, why it behaves strangely from outside, and how you can use it to build secure and useful workflows.</p>"},{"location":"Progress/Linux/Curious%20Case%20of%20-wx%20permission/#understanding-wx-on-a-directory","title":"\ud83e\uddf1 Understanding <code>-wx</code> on a Directory","text":"<p>Permissions on a directory mean something different than they do on a file:</p> <ul> <li><code>w</code> (write): permission to create, delete, or rename entries in the directory.</li> <li><code>x</code> (execute/search): permission to traverse the directory (e.g., <code>cd</code> into it, access known file names inside).</li> </ul> <p>Thus, when a directory has <code>-wx</code> permissions and no <code>r</code> (read):</p> <pre><code>chmod 300 dropbox\n# drwx------  becomes  d-wx------\n</code></pre> <p>Then a user can:</p> <ul> <li>Enter the directory (because of <code>x</code>)</li> <li>Create or remove files (because of <code>w</code>)</li> <li>Use any entry only if they already know its name</li> </ul> <p>But a user cannot:</p> <ul> <li>List the contents with <code>ls</code></li> <li>Discover what other files exist inside</li> </ul> <p>This is precisely what makes it an excellent \"dropbox\": users can deposit files, but they cannot peek at what others have left.</p>"},{"location":"Progress/Linux/Curious%20Case%20of%20-wx%20permission/#using-wx-directory-as-a-secure-drop-folder","title":"\ud83c\udfd7\ufe0f Using <code>-wx</code> Directory as a Secure Drop Folder","text":"<p>Let's construct such a directory for yourself or other users:</p> <pre><code>mkdir ~/dropbox\nchmod 733 ~/dropbox    # Owner: rwx, Group: wx, Others: wx\n</code></pre> <ul> <li>The owner (you) can read/write/traverse freely</li> <li>Other users (group/others) can enter (<code>x</code>) and drop files (<code>w</code>) but cannot see the contents (no <code>r</code>)</li> </ul> <p>Now, say another user wants to submit a file:</p> <pre><code>cp homework.txt /home/ankit/dropbox/\n</code></pre> <p>This works if they:</p> <ul> <li>Have execute (<code>x</code>) permission on every directory leading to <code>dropbox</code></li> <li>And the <code>dropbox</code> itself has <code>wx</code> permission for their class (group or others)</li> </ul> <p>But what if that user tries to check the contents?</p> <pre><code>ls /home/ankit/dropbox\n# Permission denied \u2705\n</code></pre> <p>Exactly what we want.</p>"},{"location":"Progress/Linux/Curious%20Case%20of%20-wx%20permission/#why-cd-first-then-create","title":"\ud83e\udd14 Why <code>cd</code> First, Then Create?","text":"<p>This setup, however, introduces an interesting behavior:</p> <pre><code>echo \"hello\" &gt; dropbox/test.txt\n# \u274c bash: dropbox/test.txt: No such file or directory\n</code></pre> <p>Even though the directory has write and execute, you cannot write directly from outside. Why?</p> <p>Because when you do:</p> <pre><code>echo \"hello\" &gt; dropbox/test.txt\n</code></pre> <p>The shell:</p> <ol> <li>Tries to resolve <code>dropbox</code> in the current directory \u2192 needs <code>x</code> (OK)</li> <li>Tries to look up whether <code>test.txt</code> exists inside <code>dropbox</code> \u2192 needs read (<code>r</code>) to resolve that entry!</li> </ol> <p>Without <code>r</code>, the kernel cannot check if <code>test.txt</code> exists inside <code>dropbox</code>, so it throws a \"No such file\" error\u2014even for creation!</p>"},{"location":"Progress/Linux/Curious%20Case%20of%20-wx%20permission/#the-solution-first-enter-then-create","title":"\u2705 The Solution: First Enter, Then Create","text":"<p>But if you first <code>cd</code> into the directory:</p> <pre><code>cd dropbox\necho \"hello\" &gt; test.txt   # \u2705 works\ntouch hello.txt           # \u2705 works\n</code></pre> <p>Why does this work?</p> <p>Because once you\u2019re inside the directory:</p> <ul> <li>The kernel already resolved the inode of <code>dropbox</code></li> <li>All subsequent operations like <code>touch a.txt</code> are local, and do not require listing or resolving by name via the parent</li> </ul> <p>It\u2019s as if you said: \u201cI know where I am. I don\u2019t need to ask what files exist here\u2014I know I want to create a file.\u201d</p>"},{"location":"Progress/Linux/Curious%20Case%20of%20-wx%20permission/#copying-or-moving-into-a-wx-directory-from-outside","title":"\ud83d\udcc2 Copying or Moving Into a <code>-wx</code> Directory from Outside","text":"<p>Despite the lookup limitation with <code>echo &gt; dropbox/file.txt</code>, commands like <code>cp</code> and <code>mv</code> do work if you specify the target filename fully.</p> <p>This is because they do not need to read the contents of the target directory\u2014only to place a file there by a given name:</p> <pre><code>cp file1.txt dropbox/   # \u2705 works\nmv data.csv dropbox/    # \u2705 works\n</code></pre> <p>But this will fail:</p> <pre><code>cat dropbox/file1.txt\n# \u274c Permission denied (no read + execute on the file itself)\n</code></pre>"},{"location":"Progress/Linux/Curious%20Case%20of%20-wx%20permission/#use-case-a-true-drop-box","title":"\ud83d\udd10 Use Case: A True \u201cDrop Box\u201d","text":"<p>You can use this setup in real systems:</p> <ol> <li> <p>Homework Submission Directory for Students</p> </li> <li> <p>Each student can drop their file</p> </li> <li>No one can see anyone else\u2019s submission</li> <li> <p>Temporary File Sink</p> </li> <li> <p>Applications or users deposit logs or crash reports</p> </li> <li>System collects them later</li> <li> <p>Mail Spool</p> </li> <li> <p>Users deliver messages via <code>mv</code> or <code>cp</code> into a mail queue</p> </li> </ol>"},{"location":"Progress/Linux/Curious%20Case%20of%20-wx%20permission/#cleanup-tip-use-sticky-bit-for-shared-write","title":"\ud83e\uddfc Cleanup Tip: Use Sticky Bit for Shared Write","text":"<p>If many users can drop files and you don\u2019t want them deleting each other\u2019s submissions, set the sticky bit:</p> <pre><code>chmod +t dropbox\n# Permissions become: drwx-wx--T\n</code></pre> <p>Now users can remove only their own files, even though <code>w</code> is granted to all.</p>"},{"location":"Progress/Linux/Curious%20Case%20of%20-wx%20permission/#summary-table-directory-permission-behavior","title":"\ud83e\udde9 Summary Table: Directory Permission Behavior","text":"Permission <code>cd</code> <code>ls</code> <code>touch</code> <code>cp file dropbox/</code> <code>--x</code> \u2705 \u274c \u274c \u274c <code>-wx</code> \u2705 \u274c \u2705 (after cd) \u2705 <code>r--</code> \u274c \u2705 \u274c \u274c <code>r-x</code> \u2705 \u2705 \u274c \u274c <code>rwx</code> \u2705 \u2705 \u2705 \u2705"},{"location":"Progress/Linux/Curious%20Case%20of%20-wx%20permission/#final-thoughts","title":"\ud83e\udde0 Final Thoughts","text":"<p>The <code>-wx</code> permission pattern is an elegant example of Unix philosophy: provide precise control over capabilities, and let the user build powerful abstractions. The behavior may seem counterintuitive at first\u2014especially why a direct <code>echo &gt;</code> fails\u2014but it's grounded in a consistent model: without <code>r</code>, you cannot ask what's inside.</p> <p>So the next time you build a secure drop folder, remember:</p> <p>To create inside <code>-wx</code> directory, step in first, then act.</p>"},{"location":"Progress/Linux/File%20permissions%20directories/","title":"File permissions directories","text":"<p>File Permissions for Directories in Linux</p> <p>In Linux, every file and directory is associated with three permission bits\u2014read (r = 4), write (w = 2), and execute (x = 1)\u2014for each of three classes (owner, group, others). While on regular files these bits govern content\u2010reading, content\u2010writing, and program execution, on directories they assume specialized roles:</p> <ul> <li>Read (r = 4): Permission to list the names of entries in the directory (e.g. via <code>ls</code> or <code>readdir</code>).</li> <li>Write (w = 2): Permission to create new entries or remove/rename existing ones within the directory.</li> <li>Execute (x = 1): Permission to \u201ctraverse\u201d or search the directory\u2014that is, to access inodes by name (e.g. <code>cd</code> into the directory, <code>stat</code> or open files residing beneath it).</li> </ul> <p>Because many operations combine these bits, different bit\u2010patterns yield distinct behaviors:</p>"},{"location":"Progress/Linux/File%20permissions%20directories/#r-4","title":"r--  (4)","text":"<p>A directory with read-only permission (numeric 4) allows a user to retrieve the raw list of filenames, but without execute permission it cannot be entered or used to open any file.</p> <pre><code>chmod 400 mydir\n# mydir: dr--------  \n</code></pre> <ul> <li>List names: Yes (if you invoke <code>ls mydir</code>, you\u2019ll see filenames).</li> <li>Enter or open: No (e.g. <code>cd mydir</code> fails; <code>stat mydir/file</code> is denied).   Thus, r-- is of very limited use on directories, since knowing filenames alone does not permit accessing them.</li> </ul>"},{"location":"Progress/Linux/File%20permissions%20directories/#rw-6","title":"rw-  (6)","text":"<p>With read+write (numeric 6) but no execute, one can modify the directory\u2019s data structure but cannot traverse into it or list its contents:</p> <pre><code>chmod 600 mydir\n# mydir: drw-------  \n</code></pre> <ul> <li>List names: Although the read bit is set, without execute you cannot actually \u201csearch\u201d the directory, so most tools refuse to list its contents.</li> <li>Create/remove entries: The write bit would permit creation and removal of entries if traversal were allowed; however, lacking execute, even unlink and rename typically fail.   In practice, rw- on a directory is nearly unusable\u2014it neither allows reliable listing nor safe modification of entries.</li> </ul>"},{"location":"Progress/Linux/File%20permissions%20directories/#r-x-5","title":"r-x  (5)","text":"<p>The read+execute combination (numeric 5) is common for directories meant to be browsed and navigated but not altered:</p> <pre><code>chmod 500 mydir\n# mydir: dr-x------  \n</code></pre> <ul> <li>List names: Yes.</li> <li>Traverse (cd/open): Yes.</li> <li>Modify entries: No.   This setting suits directories that should be visible and accessible (e.g. system\u2010wide libraries), while preventing any user from adding or deleting files.</li> </ul>"},{"location":"Progress/Linux/File%20permissions%20directories/#-wx-3","title":"-wx  (3)","text":"<p>With write+execute (numeric 3) but no read, the directory cannot be listed but can be entered and have entries created or deleted\u2014provided you know their names:</p> <pre><code>chmod 300 mydir\n# mydir: d-wx------  \n</code></pre> <ul> <li>List names: No.</li> <li>Traverse: Yes.</li> <li>Create/remove entries: Yes (so long as the name is specified).   This pattern underpins \u201cdrop-box\u201d directories (e.g. <code>maildrop</code> or a temporary upload folder) where users may place files without seeing what others have dropped.</li> </ul>"},{"location":"Progress/Linux/File%20permissions%20directories/#-x-1","title":"--x  (1)","text":"<p>An execute-only directory (numeric 1) allows traversal if you already know the exact name of an entry, but you cannot list or modify anything:</p> <pre><code>chmod 100 mydir\n# mydir: d--x------  \n</code></pre> <ul> <li>List names: No.</li> <li>Traverse: Yes.</li> <li>Modify entries: No.   Use cases include highly restricted namespaces where a service must access known subpaths but users must not glean any directory structure.</li> </ul>"},{"location":"Progress/Linux/File%20permissions%20directories/#-w-2","title":"-w-  (2)","text":"<p>A write-only directory (numeric 2) without execute is generally nonfunctional in practice:</p> <pre><code>chmod 200 mydir\n# mydir: d-w-------  \n</code></pre> <ul> <li>List names: No.</li> <li>Traverse: No.</li> <li>Modify entries: Although write is set, lacking execute prevents any system calls (create, unlink) from succeeding.   Consequently, -w- on a directory is effectively equivalent to no permissions (<code>---</code>).</li> </ul> <p>Thus, by mixing the read/write/execute bits in directories, administrators can finely tailor access:</p> <ul> <li>r-x (5) lets users browse without altering.</li> <li>-wx (3) lets users deposit or remove files without peeking inside.</li> <li>--x (1) lets processes access known entries without exposing structure.</li> </ul> <p>Knowing the numeric equivalents (r = 4, w = 2, x = 1) and the semantic roles of each bit in directory contexts enables precise control over who can list, enter, and modify filesystem namespaces.</p>"},{"location":"Progress/Linux/Group%20Commands/","title":"Group Commands","text":"<p>In shell scripting, grouping commands lets you treat a sequence of operations as a single unit.  When you enclose commands in parentheses, you instruct the shell to launch a new subshell process, execute everything inside it, and then discard any side-effects\u2014changes to the working directory, exported variables or file descriptor manipulations\u2014once the group finishes.  Consider:</p> <pre><code>current=\"$PWD\"\n(\n  cd /tmp\n  touch example.txt\n  echo \"Inside subshell: $PWD\"\n)\necho \"Back in original shell: $PWD\"\n</code></pre> <p>Here, the <code>cd /tmp</code> and <code>touch example.txt</code> run in a separate shell.  The first <code>echo</code> displays <code>/tmp</code>, but after the parentheses complete, the outer shell remains in its original directory, as confirmed by the second <code>echo</code>.  Any variables exported or modified inside that subshell are invisible outside, because the subshell inherits a copy of the parent\u2019s environment and then discards it on exit.</p> <p>Subshells also provide a simple way to background an entire block of commands:</p> <pre><code>(\n  date\n  tar czf backup-$(date +%F).tar.gz /var/data\n) &amp;\n</code></pre> <p>In this example, both <code>date</code> and <code>tar</code> run together in the background, and their output or errors do not block the interactive session.  The main shell immediately regains control, while the grouped commands execute asynchronously.</p> <p>By contrast, grouping with braces uses the current shell process, so any directory changes or variable assignments persist beyond the group:</p> <pre><code>{ cd /var/log; tar czf logs.tar.gz *.log; }\necho \"Now still in: $PWD\"   # will print /var/log\n</code></pre> <p>Note the required spaces after <code>{</code> and before <code>}</code>, and the terminating semicolon: braces form a command list without spawning a new process.</p> <p>Because both forms count as a single command, you can apply redirections or conditional operators to the whole group.  To capture all output in one file, you might write:</p> <pre><code>{\n  echo \"Begin report\"\n  grep ERROR app.log\n  echo \"End report\"\n} &gt; error_summary.txt\n</code></pre> <p>Whether you choose parentheses or braces depends on whether you want isolation of side-effects.  Parentheses offer a fresh environment\u2014ideal for temporary working directories or background tasks\u2014while braces run inline, allowing you to accumulate variables or remain in a different directory.  Mastering these two grouping mechanisms gives precise control over scope, I/O redirection and process management in your scripts.</p>"},{"location":"Progress/Linux/Source%20Command/","title":"Understanding the <code>source</code> Command in Unix Shells","text":"<p>The <code>source</code> command (also available as <code>.</code> in POSIX-compliant shells) is a fundamental built-in utility in Bash, Zsh, and other Unix-like shells. Unlike running a script in a new subprocess, <code>source</code> executes the contents of a file within the current shell environment. This simple distinction unlocks powerful workflows for managing environment variables, functions, and shell configuration.</p>"},{"location":"Progress/Linux/Source%20Command/#what-is-the-source-command","title":"What Is the <code>source</code> Command?","text":"<ul> <li>Syntax</li> </ul> <p><code>bash   source &lt;filename&gt;   # or equivalently in POSIX shells:   . &lt;filename&gt;</code> * Behavior   When you <code>source</code> a file, the shell reads each line and executes it as if you had typed it directly at the prompt. No new process is created; all variable assignments, function definitions, and directory changes persist in your current shell session.</p>"},{"location":"Progress/Linux/Source%20Command/#why-use-source","title":"Why Use <code>source</code>?","text":"<ol> <li>Persist Environment Changes    Exported variables in a sourced file remain available in your session:</li> </ol> <p><code>bash    # env.sh    export APP_ENV=development    export PATH=\"$HOME/.local/bin:$PATH\"</code></p> <p><code>bash    $ source env.sh    $ echo $APP_ENV    development</code></p> <ol> <li>Load Functions and Aliases    Define reusable shell functions and aliases in a separate file, then load them when needed:</li> </ol> <p><code>bash    # funcs.sh    greet() {      echo \"Hello, $1!\"    }    alias ll='ls -lh'</code></p> <p><code>bash    $ source funcs.sh    $ greet World    Hello, World!    $ ll    total 8.0K</code></p> <ol> <li>Reload Configuration on the Fly    After editing your <code>~/.bashrc</code> or <code>~/.zshrc</code>, apply changes immediately without logging out:</li> </ol> <p><code>bash    $ nano ~/.bashrc    # (edit prompts, aliases, exports...)    $ source ~/.bashrc</code></p> <ol> <li>Modularize Scripts    Break a large script into logical pieces:</li> </ol> <p>```bash    # lib/database.sh    connect_db() { \u2026 }    disconnect_db() { \u2026 }</p> <p># lib/utils.sh    log() { echo \"[$(date)] $*\"; }</p> <p># main.sh    source lib/database.sh    source lib/utils.sh</p> <p>connect_db    log \"Database connected\"    disconnect_db    ```</p>"},{"location":"Progress/Linux/Source%20Command/#use-case-loading-configuration-files","title":"Use Case: Loading Configuration Files","text":"<p>Most users rely on <code>source</code> implicitly every time a new interactive shell starts:</p> <ul> <li><code>~/.bash_profile</code> or <code>~/.profile</code>   Often contains a line like:</li> </ul> <p><code>bash   if [ -f ~/.bashrc ]; then     source ~/.bashrc   fi</code> * <code>~/.bashrc</code>   Holds aliases, functions, and environment exports that you want in every interactive shell. * <code>.env</code> Files in Projects   Teams may store project-specific variables in a file named <code>.env</code>:</p> <p><code>bash   # .env   DB_HOST=localhost   DB_USER=alice   DB_PASS=secret</code></p> <p>Before running the application:</p> <p><code>bash   $ source .env   $ ./run_app.sh</code></p>"},{"location":"Progress/Linux/Source%20Command/#what-happens-if-you-dont-use-source","title":"What Happens If You Don\u2019t Use <code>source</code>?","text":"<ol> <li>No Environment Persistence</li> </ol> <p>```bash    $ bash env.sh    $ echo $APP_ENV</p> <p># (empty\u2014script ran in a subshell)    ```</p> <ol> <li>Functions and Aliases Not Loaded</li> </ol> <p><code>bash    $ bash funcs.sh    $ type greet    bash: type: greet: not found</code></p> <p>Because the script ran in a child process, definitions vanish upon exit.</p> <ol> <li> <p>Missed Configuration Updates    After editing <code>~/.bashrc</code>, you\u2019ll need to open a fresh shell to pick up changes\u2014closing and reopening terminals frequently interrupts your workflow.</p> </li> <li> <p>Risk of Overlooking Errors    If you forget <code>source</code> and run a script directly, you might assume your environment variables are set when they\u2019re not, leading to confusing failures.</p> </li> </ol>"},{"location":"Progress/Linux/Source%20Command/#best-practices","title":"Best Practices","text":"<ul> <li>Audit Sourced Files: Since they run with full access to your shell, only source trusted files.</li> <li>Check for Existence: Guard against errors with:</li> </ul> <p><code>bash   [ -f config.sh ] &amp;&amp; source config.sh</code> * Use Comments Liberally: Document why each <code>source</code> is needed, especially in shared scripts. * Prefer Absolute Paths: Avoid sourcing from ambiguous relative locations:</p> <p><code>bash   source \"$HOME/scripts/lib.sh\"</code></p>"},{"location":"Progress/Linux/Source%20Command/#conclusion","title":"Conclusion","text":"<p>The <code>source</code> command is an indispensable tool for shell users and script writers alike. By executing scripts in the current shell context, it lets you manage environment variables, functions, and aliases seamlessly. Omitting <code>source</code> when you mean to use it can lead to non-persistent settings, missing functions, and wasted time restarting shells. Embrace <code>source</code> to keep your workflows modular, efficient, and predictable.</p>"},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/","title":"When to use Double Quotes","text":""},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/#what-do-double-quotes-do","title":"\ud83d\udd0d What Do Double Quotes Do?","text":"<p>Double quotes preserve the value of most characters, but allow variable expansion and command substitution inside.</p> <pre><code>echo \"$USER\"\n</code></pre> <p>This prints the value of the <code>USER</code> variable. If you omit the quotes, it may still work... unless there's whitespace or special characters involved\u2014and then things get messy.</p>"},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/#when-to-use-double-quotes","title":"\ud83c\udfaf When to Use Double Quotes","text":""},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/#1-when-expanding-variables","title":"\u2705 1. When Expanding Variables","text":"<p>Always quote variables unless you're deliberately splitting them.</p> <pre><code>echo \"$HOME\"\necho \"$1\"\necho \"$myvar\"\n</code></pre> <p>Why? Because if a variable contains spaces, unquoted expansion will break your script.</p> <p>Example:</p> <pre><code>FILENAME=\"My File.txt\"\nrm $FILENAME   # BAD: will try to delete \"My\" and \"File.txt\"\nrm \"$FILENAME\" # GOOD: removes the full file\n</code></pre>"},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/#2-when-using-command-substitution","title":"\u2705 2. When Using Command Substitution","text":"<p>If you use <code>$(...)</code> or backticks, quote the result to prevent word splitting.</p> <pre><code>DATE=\"$(date +%F)\"\necho \"$DATE\"\n</code></pre>"},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/#3-when-using-strings-with-spaces-or-special-characters","title":"\u2705 3. When Using Strings with Spaces or Special Characters","text":"<pre><code>MESSAGE=\"Hello, world!\"\necho \"$MESSAGE\"\n</code></pre> <p>If unquoted, Bash would treat the comma and space as separators. Quotes keep the whole string intact.</p>"},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/#4-when-passing-arguments-to-commands","title":"\u2705 4. When Passing Arguments to Commands","text":"<p>Especially commands that expect a single path or string.</p> <pre><code>grep \"$pattern\" \"$filename\"\n</code></pre> <p>If <code>filename=\"my document.txt\"</code>, unquoted use breaks.</p>"},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/#5-when-using-strings-with-glob-characters","title":"\u2705 5. When Using Strings with Glob Characters (<code>*</code>, <code>?</code>)","text":"<p>Unquoted variables can be interpreted as wildcards.</p> <pre><code>filename=\"*\"\nls \"$filename\"  # looks for a file literally named \"*\"\nls $filename    # expands to match all files in current dir\n</code></pre>"},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/#when-not-to-use-double-quotes","title":"\u274c When Not to Use Double Quotes","text":""},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/#1-if-you-want-word-splitting","title":"1. If You Want Word Splitting","text":"<p>Say you're reading multiple words into an array:</p> <pre><code>words=\"apple banana cherry\"\nfor word in $words; do\n  echo \"$word\"\ndone\n</code></pre> <p>Quoting <code>$words</code> would prevent the loop from splitting it.</p>"},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/#2-using-arrays-and-you-want-each-element-split","title":"2. Using Arrays and You Want Each Element Split","text":"<pre><code>arr=(one \"two three\" four)\nprintf '%s\\n' \"${arr[@]}\"   # Correct\nprintf '%s\\n' \"${arr[*]}\"   # Treats it as one big string\n</code></pre>"},{"location":"Progress/Linux/When%20to%20use%20Double%20Quotes/#summary-golden-rule","title":"\ud83e\udde0 Summary: Golden Rule","text":"<p>When in doubt, quote it out.</p> <p>If you're expanding a variable or command and you want the result treated as one single value, use double quotes:</p> <pre><code>\"$var\" vs $var \u2192 safer, predictable, less painful debugging\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/","title":"Set-up Commands","text":"<p>Understanding Git Setup Commands: A Complete Conceptual Article for Developers</p> <p>Setting up Git correctly is the foundational step toward managing your source code efficiently. Git is a distributed version control system, and its setup involves both user-level and repository-level configurations that influence how commits are recorded, how remotes behave, and how Git stores internal state. This article provides a complete guide to Git setup commands with a focus on precise concepts, internal mechanisms, and practical use cases.</p>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#1-configuring-git-for-the-first-time","title":"1. Configuring Git for the First Time","text":"<p>Before using Git in any project, you must tell Git who you are. Git associates every commit you make with a name and email address. These values are stored in Git\u2019s configuration system.</p> <pre><code>git config --global user.name \"Ankit Chauhan\"\ngit config --global user.email \"ankit@example.com\"\n</code></pre> <p>Here, <code>--global</code> applies the configuration for the current system user and stores it in:</p> <pre><code>~/.gitconfig\n</code></pre> <p>This file can be edited directly or viewed with:</p> <pre><code>git config --global --list\n</code></pre> <p>Git uses a layered configuration system:</p> <ul> <li>System-wide settings: <code>/etc/gitconfig</code> (rarely edited by individuals)</li> <li>User-level settings: <code>~/.gitconfig</code> or <code>%USERPROFILE%\\.gitconfig</code> on Windows</li> <li>Repository-specific settings: <code>.git/config</code> inside the repository</li> </ul> <p>If you want to override a global setting for a specific project, omit <code>--global</code>:</p> <pre><code>git config user.name \"Ankit Local\"\n</code></pre> <p>This stores the setting in <code>.git/config</code>.</p>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#2-other-important-global-configuration-settings","title":"2. Other Important Global Configuration Settings","text":"<p>You can configure several other preferences to optimize your workflow.</p>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#21-set-default-editor","title":"2.1 Set default editor","text":"<p>Git may open an editor when writing commit messages, editing rebase plans, or merging. Set your preferred editor:</p> <pre><code>git config --global core.editor \"code --wait\"\n</code></pre> <p>Here, <code>code</code> refers to Visual Studio Code. The <code>--wait</code> flag tells Git to wait until the editor is closed before proceeding.</p>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#22-set-default-initial-branch-name","title":"2.2 Set default initial branch name","text":"<p>In older Git versions, the default branch created by <code>git init</code> was <code>master</code>. To use <code>main</code> instead:</p> <pre><code>git config --global init.defaultBranch main\n</code></pre> <p>This prevents inconsistencies when collaborating across systems.</p>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#23-enable-colored-output","title":"2.3 Enable colored output","text":"<p>To make Git output more readable in the terminal:</p> <pre><code>git config --global color.ui auto\n</code></pre> <p>This adds syntax highlighting and color to diffs, status, and logs.</p>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#3-creating-a-new-repository","title":"3. Creating a New Repository","text":"<p>To create a Git repository inside an existing project directory, run:</p> <pre><code>git init\n</code></pre> <p>This command creates a hidden <code>.git</code> directory. This directory contains all metadata and internal data structures required for Git\u2019s versioning engine. It turns the folder into a version-controlled project. Do not delete or edit this folder manually.</p> <p>The directory structure looks like this:</p> <pre><code>your-project/\n\u251c\u2500\u2500 .git/\n\u2502   \u251c\u2500\u2500 config                 # Local configuration\n\u2502   \u251c\u2500\u2500 HEAD                   # Points to current branch (e.g., refs/heads/main)\n\u2502   \u251c\u2500\u2500 index                  # Staging area (cached snapshot of next commit)\n\u2502   \u251c\u2500\u2500 objects/               # Object database: blobs, trees, commits\n\u2502   \u2514\u2500\u2500 refs/                  # Pointers (heads, tags, remotes)\n\u251c\u2500\u2500 your-code-files...\n</code></pre> <p>The most important files and concepts inside <code>.git</code> are:</p> <ul> <li>HEAD: symbolic reference to the currently checked out branch.</li> <li>objects/: the actual content Git tracks, stored in compressed format. Files (blobs), directories (trees), and commits are all stored here.</li> <li>refs/heads/: contains branch names, each pointing to the latest commit on that branch.</li> <li>index: a binary file that stores what is staged for the next commit. This is known as the staging area or cache.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#4-cloning-an-existing-repository","title":"4. Cloning an Existing Repository","text":"<p>To download a Git repository (typically from a remote like GitHub), use:</p> <pre><code>git clone https://github.com/user/project.git\n</code></pre> <p>This performs the following steps:</p> <ol> <li>Downloads the entire repository history and all branches.</li> <li>Creates a new directory named <code>project/</code> (unless specified).</li> <li>Initializes a new <code>.git/</code> folder inside it.</li> <li>Adds a remote named <code>origin</code> pointing to the source URL.</li> </ol> <p>To clone using SSH (more secure, especially for push access):</p> <pre><code>git clone git@github.com:user/project.git\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#5-understanding-git-remotes-and-authentication","title":"5. Understanding Git Remotes and Authentication","text":"<p>Git can connect to remote repositories via either HTTPS or SSH. Understanding the distinction is essential.</p>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#51-https-authentication","title":"5.1 HTTPS Authentication","text":"<p>You provide your username and password/token for each interaction or use a credential helper to cache them:</p> <pre><code>git config --global credential.helper cache\n</code></pre> <p>For long-term caching (e.g., a month):</p> <pre><code>git config --global credential.helper 'cache --timeout=2592000'\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#52-ssh-authentication","title":"5.2 SSH Authentication","text":"<p>SSH uses public/private key pairs to authenticate without prompting for a password.</p> <p>To generate a key pair:</p> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>After generating the key, start the SSH agent and add your private key:</p> <pre><code>eval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\n</code></pre> <p>Then, copy your public key to GitHub or GitLab:</p> <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> <p>Test the connection:</p> <pre><code>ssh -T git@github.com\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#6-verifying-and-viewing-configuration","title":"6. Verifying and Viewing Configuration","text":"<p>To see all applied configuration settings:</p> <pre><code>git config --list\n</code></pre> <p>To target a particular scope:</p> <pre><code>git config --global --list\ngit config --system --list\ngit config --local --list\n</code></pre> <p>To read or edit a specific configuration:</p> <pre><code>git config --get user.name\ngit config --edit --global\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#7-summary-initial-setup-checklist","title":"7. Summary: Initial Setup Checklist","text":"Task Command Stored In Set name <code>git config --global user.name \"Ankit\"</code> <code>~/.gitconfig</code> Set email <code>git config --global user.email \"you@example.com\"</code> <code>~/.gitconfig</code> Set default branch name <code>git config --global init.defaultBranch main</code> <code>~/.gitconfig</code> Set default editor <code>git config --global core.editor \"vim\"</code> <code>~/.gitconfig</code> Enable color <code>git config --global color.ui auto</code> <code>~/.gitconfig</code> Create a new Git repo <code>git init</code> Creates <code>.git/</code> in current dir Clone a remote repo <code>git clone URL</code> Creates <code>.git/</code> in new folder Set credential caching (optional) <code>git config --global credential.helper cache</code> <code>~/.gitconfig</code> Generate SSH key (optional) <code>ssh-keygen -t ed25519</code> <code>~/.ssh/</code> directory Add SSH key to agent (optional) <code>ssh-add ~/.ssh/id_ed25519</code> Active session"},{"location":"Progress/Quick%20Revision%20GIT/01-%20Setup/#8-key-internal-concepts-of-git-initialization","title":"8. Key Internal Concepts of Git Initialization","text":"Component Description <code>.git/</code> The versioning brain. All history, metadata, and configuration live here. <code>HEAD</code> A reference to the current branch tip. <code>refs/heads/&lt;branch&gt;</code> Stores the latest commit hash for each branch. <code>index</code> Also called the staging area. It holds what will go into the next commit. <code>objects/</code> Git's object database. All files and commits are stored as hashed objects. Blob A file's content snapshot. Tree A directory listing with pointers to blobs and other trees. Commit A snapshot of the tree + metadata (author, message, parent)."},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/","title":"Git Repository Setup and File State Management","text":"<p>This article presents an integrated and deeply conceptual guide to Git repository setup, file tracking, internal mechanics like <code>HEAD</code>, and most importantly, how to compare different commits using <code>git diff</code>. The purpose is to build not only a practical command reference but also a solid mental model of what Git is doing internally.</p>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#1-repository-initialization-and-cloning","title":"1. Repository Initialization and Cloning","text":""},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#11-git-init","title":"1.1 <code>git init</code>","text":"<pre><code>git init\n</code></pre> <ul> <li>Initializes a new Git repository by creating a <code>.git/</code> directory in the current folder.</li> <li> <p><code>.git/</code> includes:</p> </li> <li> <p><code>HEAD</code>: points to the current branch (e.g., <code>refs/heads/main</code>)</p> </li> <li><code>objects/</code>: stores all data (files, directories, commits) as content-addressed blobs</li> <li><code>refs/</code>: contains references (branches and tags)</li> <li><code>index</code>: the staging area</li> <li><code>config</code>: local repository configuration</li> </ul> <p>Optional:</p> <pre><code>git init --initial-branch=main\n</code></pre> <p>This ensures the default branch is <code>main</code>, not <code>master</code>.</p>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#12-git-clone","title":"1.2 <code>git clone</code>","text":"<pre><code>git clone &lt;url&gt; [dir]\n</code></pre> <ul> <li>Clones a remote repository into a local directory.</li> <li>Copies the entire <code>.git/</code> structure.</li> <li>Sets the remote URL as <code>origin</code> by default.</li> <li>To give a different remote name:</li> </ul> <pre><code>git clone -o upstream &lt;url&gt;\n</code></pre> <p>You now refer to <code>upstream</code> instead of <code>origin</code>.</p>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#2-understanding-branch-names-main-vs-master","title":"2. Understanding Branch Names: <code>main</code> vs <code>master</code>","text":"<ul> <li>Git historically used <code>master</code> as the default.</li> <li>Modern conventions use <code>main</code> to avoid problematic terminology.</li> <li>You can rename the current branch:</li> </ul> <pre><code>git branch -m master main\n</code></pre> <p>And make <code>main</code> the default for future repositories:</p> <pre><code>git config --global init.defaultBranch main\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#3-file-lifecycle-in-git","title":"3. File Lifecycle in Git","text":"<p>Every file in a Git repository is in one of several states:</p> State Description Untracked File exists on disk but Git isn\u2019t tracking it. Tracked File is part of the repository (may be unmodified or changed). Modified File differs from last commit. Staged File is added to the index and will be part of the next commit. Committed File snapshot is recorded in Git history."},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#4-the-index-staging-area","title":"4. The Index (Staging Area)","text":"<p>The index (a.k.a. staging area) is a binary file <code>.git/index</code> that stores:</p> <ul> <li>The next tree (snapshot) that will be committed.</li> <li> <p>For each file:</p> </li> <li> <p>Path</p> </li> <li>Mode (permissions)</li> <li>Object SHA-1 (blob)</li> <li>Timestamps</li> </ul> <p>To stage changes:</p> <pre><code>git add file.txt        # stages the file\ngit add .               # stages all changes in the current directory\ngit add -u              # stages only modified and deleted tracked files\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#5-commit-operation-and-the-role-of-head","title":"5. Commit Operation and the Role of <code>HEAD</code>","text":"<pre><code>git commit -m \"Message\"\n</code></pre> <ul> <li>Takes the current contents of the index, builds a tree object.</li> <li> <p>Saves a commit object pointing to:</p> </li> <li> <p>The tree</p> </li> <li>Parent commit(s)</li> <li>Metadata (author, timestamp, message)</li> <li>Updates <code>HEAD</code> to point to this new commit.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#51-head","title":"5.1 <code>HEAD</code>","text":"<ul> <li>A symbolic reference to the current commit through the current branch.</li> <li>If you're on <code>main</code>, <code>HEAD</code> \u2192 <code>refs/heads/main</code> \u2192 <code>&lt;commit hash&gt;</code>.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#6-comparing-changes-using-git-diff","title":"6. Comparing Changes Using <code>git diff</code>","text":""},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#61-working-directory-vs-index-staging-area","title":"6.1 Working directory vs Index (Staging area)","text":"<pre><code>git diff\n</code></pre> <ul> <li>Shows what has changed but not yet staged.</li> <li>Compares working directory to index.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#62-index-vs-last-commit-head","title":"6.2 Index vs Last Commit (<code>HEAD</code>)","text":"<pre><code>git diff --cached\n</code></pre> <ul> <li>Shows what is staged but not yet committed.</li> <li>Compares index to HEAD.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#63-full-difference-working-directory-vs-last-commit","title":"6.3 Full difference: Working directory vs Last Commit","text":"<pre><code>git diff HEAD\n</code></pre> <ul> <li>Shows all differences (staged and unstaged) from last commit.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#7-comparing-two-commits","title":"7. Comparing Two Commits","text":"<p>This is where Git's object database model becomes powerful.</p>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#71-syntax","title":"7.1 Syntax","text":"<pre><code>git diff &lt;commit1&gt; &lt;commit2&gt;\n</code></pre> <ul> <li>Compares the tree of <code>commit2</code> against <code>commit1</code>.</li> <li>Shows what you would need to apply to <code>commit1</code> to get <code>commit2</code>.</li> </ul> <p>Example:</p> <pre><code>git diff HEAD~1 HEAD\n</code></pre> <ul> <li>Compares the previous commit to the current commit.</li> <li>Shows what changed in the most recent commit.</li> </ul> <pre><code>git diff a1b2c3d f6e7g8h\n</code></pre> <ul> <li>Compares any two commits by hash.</li> </ul> <p>If you want to see file changes in a specific file between two commits:</p> <pre><code>git diff HEAD~3 HEAD -- path/to/file.txt\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#72-other-useful-variants","title":"7.2 Other Useful Variants","text":""},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#compare-two-branches","title":"Compare two branches","text":"<pre><code>git diff feature-branch main\n</code></pre> <ul> <li>Shows what is in <code>main</code> that is not in <code>feature-branch</code>.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#compare-a-commit-to-the-working-directory","title":"Compare a commit to the working directory","text":"<pre><code>git diff &lt;commit&gt; -- path/to/file\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#8-the-dot-notation-and","title":"8. The Dot Notation: <code>..</code> and <code>...</code>","text":""},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#81-ab","title":"8.1 <code>A..B</code>","text":"<pre><code>git log A..B\n</code></pre> <ul> <li>Shows commits in <code>B</code> that are not in <code>A</code>.</li> </ul> <p>This means: \"What is in <code>B</code> that I haven\u2019t already seen in <code>A</code>?\"</p>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#82-ab-three-dot","title":"8.2 <code>A...B</code> (Three-dot)","text":"<pre><code>git log A...B\n</code></pre> <ul> <li>Shows commits that are in either A or B but not both.</li> <li>Useful when examining divergence.</li> </ul> <pre><code>git diff A...B\n</code></pre> <ul> <li>Diffs the merge base of A and B with <code>B</code>.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#9-viewing-history-and-commits","title":"9. Viewing History and Commits","text":"<pre><code>git log\n</code></pre> <p>Useful options:</p> <ul> <li><code>--oneline</code>: compact form</li> <li><code>--graph</code>: ASCII commit tree</li> <li><code>--all</code>: includes all branches</li> <li><code>--decorate</code>: adds refs like <code>HEAD</code>, <code>origin/main</code></li> </ul> <pre><code>git log --oneline --graph --decorate --all\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#show-specific-commit","title":"Show specific commit","text":"<pre><code>git show HEAD\n</code></pre> <ul> <li>Displays the full patch and metadata of the latest commit.</li> </ul> <pre><code>git show HEAD~2\n</code></pre> <ul> <li>Two commits before current.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/02%20-%20File%20Management/#10-summary-table-of-important-commands","title":"10. Summary Table of Important Commands","text":"Purpose Command Notes Initialize repository <code>git init</code> Creates <code>.git/</code> Clone repository <code>git clone &lt;url&gt;</code> Pulls full history Track new file <code>git add file.txt</code> Moves to index Stage all changes <code>git add .</code> Includes untracked Commit <code>git commit -m \"message\"</code> Creates new snapshot Status of working dir <code>git status</code> Shows tracked/untracked Compare working dir vs index <code>git diff</code> Unstaged changes Compare index vs HEAD <code>git diff --cached</code> Staged changes Compare working dir vs HEAD <code>git diff HEAD</code> All changes Compare two commits <code>git diff &lt;commit1&gt; &lt;commit2&gt;</code> Between any two Compare current and previous commit <code>git diff HEAD~1 HEAD</code> One-commit diff Show commit history <code>git log</code> Full history Compact log <code>git log --oneline -n 5</code> Short log Graph log with refs <code>git log --oneline --graph --decorate --all</code> Tree-like history Show a commit <code>git show HEAD</code> Patch + metadata Compare branches <code>git diff branchA branchB</code> Diffs trees Unique commits in B <code>git log A..B</code> B minus A Symmetric difference <code>git log A...B</code> In A or B but not both <p>This article provides a complete and rigorous understanding of Git's core operations from initialization and cloning to precise file comparison using <code>git diff</code>. Every command is mapped not only to its syntax but also to the internal concepts like trees, blobs, HEAD, and the index, which make Git a content-addressable, snapshot-based system rather than a change-based one.</p> <p>If you want to follow this with an article on resetting, amending commits, or undoing things using <code>git reset</code>, <code>git restore</code>, and <code>git reflog</code>, let me know.</p>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/","title":"Undoing Things in Git: A Deep Dive into <code>amend</code>, <code>revert</code>, <code>restore</code>, <code>reset</code>, <code>clean</code>, and <code>reflog</code>","text":"<p>Git is a content-addressable version control system built on immutable snapshots. Unlike traditional version control systems that track file changes as deltas, Git takes a fundamentally different approach: it captures entire snapshots of your file tree and stores them as blobs, trees, and commits, which are interconnected through a directed acyclic graph (DAG). This architectural decision empowers Git with remarkable flexibility in revising history, recovering from mistakes, and restructuring your development timeline.</p> <p>However, with this power comes complexity: when developers ask \u201cHow do I undo something in Git?\u201d, there is no single answer. The \u201cright\u201d tool depends on the layer you\u2019re operating on\u2014working directory, index, or commit history\u2014and on the scope: Are you correcting a typo in the last commit? Removing untracked files? Rewinding the branch tip? Or recovering a lost commit?</p> <p>This guide explains, with complete conceptual detail and practical use cases, the six core Git tools for undoing things:</p> <ul> <li><code>git commit --amend</code></li> <li><code>git revert</code></li> <li><code>git restore</code></li> <li><code>git reset</code></li> <li><code>git clean</code></li> <li><code>git reflog</code></li> </ul> <p>Each section focuses on what it changes, why it exists, how it works internally, when to use it, and common mistakes to avoid.</p>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#1-git-commit-amend-refining-the-most-recent-commit","title":"1. <code>git commit --amend</code>: Refining the Most Recent Commit","text":""},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#purpose","title":"Purpose","text":"<p>To replace the current tip of the branch with a modified version, optionally changing the content, message, or metadata of the most recent commit.</p>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#layer-affected","title":"Layer Affected","text":"<ul> <li>Repository (rewrites the tip commit)</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#how-it-works-internally","title":"How It Works Internally","text":"<ul> <li> <p>When you run <code>git commit --amend</code>, Git:</p> </li> <li> <p>Reads the current <code>HEAD</code> commit and its parent.</p> </li> <li>Prepares a new commit object, possibly with a new tree (if index differs).</li> <li>Reuses the same parent as the previous tip.</li> <li>Updates the branch ref to point to the new commit.</li> <li>The old commit becomes dangling (i.e., unreachable from a ref) but remains in <code>.git/objects</code>.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#use-cases","title":"Use Cases","text":"<ul> <li>You committed prematurely and forgot to add a file.</li> <li>You need to correct a typo or clarify the commit message.</li> <li>You staged more changes and want them included in the same commit as before.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#command-examples","title":"Command Examples","text":"<pre><code># Add a missing file and amend the last commit\ngit add forgotten_file.txt\ngit commit --amend\n\n# Change the commit message only\ngit commit --amend -m \"Fix typo and update README\"\n\n# Keep message but update timestamp and author\ngit commit --amend --no-edit --reset-author\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#cautions","title":"Cautions","text":"<ul> <li>Avoid amending commits that are already pushed to a shared branch unless you force-push and warn collaborators.</li> <li>Amended commits have new hashes; the old versions are still present until garbage collected.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#2-git-revert-creating-an-inverse-commit","title":"2. <code>git revert</code>: Creating an Inverse Commit","text":""},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#purpose_1","title":"Purpose","text":"<p>To undo the effects of a previous commit by creating a new commit that reverses its changes. Unlike <code>reset</code> or <code>amend</code>, <code>revert</code> preserves history.</p>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#layer-affected_1","title":"Layer Affected","text":"<ul> <li>Repository (adds a new commit to undo previous one)</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#how-it-works-internally_1","title":"How It Works Internally","text":"<ul> <li>Git calculates the patch introduced by the target commit and applies the inverse of that patch to the current tree.</li> <li>A new commit is created with that inverse diff, referencing the current HEAD as its parent.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#use-cases_1","title":"Use Cases","text":"<ul> <li>You want to undo a bad commit on a public branch without rewriting history.</li> <li>You need to back out of a feature or hotfix that introduced regressions.</li> <li>You want to make the undo visible and traceable in history.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#command-examples_1","title":"Command Examples","text":"<pre><code># Revert the most recent commit\ngit revert HEAD\n\n# Revert a specific commit by SHA\ngit revert abc1234\n\n# Revert a merge commit (you must specify the parent)\ngit revert -m 1 d3f4567\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#cautions_1","title":"Cautions","text":"<ul> <li>Conflicts may occur, especially if subsequent commits modified the same lines.</li> <li>You can \u201cundo a revert\u201d by reverting the revert commit (effectively reapplying the original patch).</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#3-git-restore-replacing-file-content-from-index-or-commit","title":"3. <code>git restore</code>: Replacing File Content from Index or Commit","text":""},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#purpose_2","title":"Purpose","text":"<p>To restore the content of files from either the index (staging area) or a previous commit to the working directory or index.</p>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#layers-affected","title":"Layers Affected","text":"<ul> <li>Working Directory</li> <li>Index (optional)</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#how-it-works-internally_2","title":"How It Works Internally","text":"<ul> <li><code>git restore</code> copies the file content from the specified source (default is index or <code>HEAD</code>) into the working directory and/or index.</li> <li>Does not create a new commit or affect <code>HEAD</code>.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#use-cases_2","title":"Use Cases","text":"<ul> <li>Discarding uncommitted changes to a file.</li> <li>Unstaging a file without modifying its content.</li> <li>Reverting a file to an earlier version from history.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#command-examples_2","title":"Command Examples","text":"<pre><code># Discard changes in working directory (from index)\ngit restore my_file.txt\n\n# Unstage a file (index \u2190 HEAD)\ngit restore --staged my_file.txt\n\n# Restore from a previous commit\ngit restore --source=HEAD~2 --staged --worktree my_file.txt\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#cautions_2","title":"Cautions","text":"<ul> <li>Files restored from the index or earlier commits overwrite local modifications\u2014ensure you don\u2019t lose important unsaved work.</li> <li><code>git restore</code> is safe but not reversible unless you have a stash or prior commit.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#4-git-reset-moving-head-and-rewriting-indexworktree","title":"4. <code>git reset</code>: Moving HEAD and Rewriting Index/Worktree","text":""},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#purpose_3","title":"Purpose","text":"<p>To move the current branch\u2019s tip (and <code>HEAD</code>) to another commit, optionally resetting the index and working directory to match it.</p>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#layers-affected_1","title":"Layers Affected","text":"<ul> <li>Repository</li> <li>Index</li> <li>Working Directory (depending on mode)</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#how-it-works-internally_3","title":"How It Works Internally","text":"<ul> <li>Git moves <code>HEAD</code> and the current branch ref to a different commit.</li> <li> <p>Based on the mode:</p> </li> <li> <p><code>--soft</code>: leaves index and working directory unchanged.</p> </li> <li><code>--mixed</code>: resets the index to match new HEAD, but leaves working directory.</li> <li><code>--hard</code>: resets everything, including working files, to new HEAD.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#use-cases_3","title":"Use Cases","text":"<ul> <li>You want to rework recent commits (soft).</li> <li>You want to unstage all changes (mixed).</li> <li>You want to discard all local work and roll back to a clean state (hard).</li> <li>You need to \u201cuncommit\u201d without losing content.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#command-examples_3","title":"Command Examples","text":"<pre><code># Undo last commit, keep changes staged\ngit reset --soft HEAD~1\n\n# Undo commit and unstage changes\ngit reset --mixed HEAD~1\n\n# Remove last two commits and all associated changes\ngit reset --hard HEAD~2\n\n# Unstage a specific file\ngit reset HEAD file.txt\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#cautions_3","title":"Cautions","text":"<ul> <li><code>--hard</code> permanently discards working directory changes; it\u2019s destructive.</li> <li>After reset, previous commits become dangling unless referenced or recovered via <code>reflog</code>.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#5-git-clean-removing-untracked-files","title":"5. <code>git clean</code>: Removing Untracked Files","text":""},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#purpose_4","title":"Purpose","text":"<p>To delete untracked files and directories from the working directory, including optionally ignored files.</p>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#layer-affected_2","title":"Layer Affected","text":"<ul> <li>Working Directory (only untracked and ignored content)</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#how-it-works-internally_4","title":"How It Works Internally","text":"<ul> <li> <p>Git scans the working directory for files that:</p> </li> <li> <p>Are not in the index.</p> </li> <li>Are not part of any commit.</li> <li>It then deletes them according to the flags.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#use-cases_4","title":"Use Cases","text":"<ul> <li>Cleaning up build artifacts or editor-generated files.</li> <li>Getting back to a \"pristine\" working tree.</li> <li>Removing ignored files like logs or <code>.DS_Store</code>.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#command-examples_4","title":"Command Examples","text":"<pre><code># Preview deletion\ngit clean -nfd\n\n# Delete untracked files and directories\ngit clean -fd\n\n# Delete ignored files too\ngit clean -fdx\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#cautions_4","title":"Cautions","text":"<ul> <li>Destructive and irreversible: Git cannot recover deleted untracked files.</li> <li>Always run <code>git clean -n</code> first to preview.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#6-git-reflog-recovering-from-mistakes","title":"6. <code>git reflog</code>: Recovering from Mistakes","text":""},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#purpose_5","title":"Purpose","text":"<p>To track all changes to HEAD and branch refs, even if commits are no longer reachable from any branch or tag.</p>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#layer-affected_3","title":"Layer Affected","text":"<ul> <li>Ref History (tracking of branch pointer movements)</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#how-it-works-internally_5","title":"How It Works Internally","text":"<ul> <li>Git records every change to <code>HEAD</code> (e.g., commit, reset, checkout, merge, amend) in <code>.git/logs/HEAD</code> and <code>.git/logs/refs/heads/&lt;branch&gt;</code>.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#use-cases_5","title":"Use Cases","text":"<ul> <li>Recovering commits lost after a reset, rebase, or amend.</li> <li>Locating a previously checked-out commit.</li> <li>Finding a working state before a mistake.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#command-examples_5","title":"Command Examples","text":"<pre><code># Show movement history of HEAD\ngit reflog\n\n# Reset to a previous position\ngit reset --hard HEAD@{3}\n\n# Create a branch from a reflog commit\ngit checkout -b recovered HEAD@{4}\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#cautions_5","title":"Cautions","text":"<ul> <li>Reflog entries expire after 90 days (by default) or after garbage collection (<code>git gc</code>).</li> <li>If you perform destructive operations (<code>reset --hard</code>, <code>clean</code>, <code>checkout</code>), check <code>reflog</code> immediately if anything is lost.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/03%20-%20Undoing%20Things/#summary-table-what-each-command-undoes","title":"Summary Table: What Each Command Undoes","text":"Command Undo Scope Preserves History? Affects HEAD? Destructive? Reversible via Reflog? <code>commit --amend</code> Last commit content/message \u2718 (rewrites) \u2714 No \u2714 <code>revert</code> Any past commit \u2714 \u2714 No N/A (non-destructive) <code>restore</code> File content in index or worktree \u2714 \u2718 Possibly No (unless committed) <code>reset</code> Branch tip and optionally index/worktree \u2718 (rewrites) \u2714 Yes (in <code>--hard</code>) \u2714 <code>clean</code> Untracked and ignored files N/A \u2718 Yes \u2718 <code>reflog</code> Restores any lost <code>HEAD</code> or commit N/A \u2718 (read-only) No \u2714"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/","title":"Git Branching: Advanced Guide with Internals and Best Practices","text":"<p>Branching is at the heart of Git's distributed workflow, enabling you to work on isolated features, experiment freely, and collaborate without stepping on others\u2019 toes. In this article, we\u2019ll go deeper\u2014beyond the basics\u2014into advanced branching, switching, tracking, remote interactions, and Git internals.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#1-what-exactly-is-a-branch-in-git","title":"\ud83e\uddf1 1. What Exactly Is a Branch in Git?","text":"<p>In Git, a branch is simply a pointer to a commit\u2014represented by a file:</p> <pre><code>.git/refs/heads/&lt;branch-name&gt;\n</code></pre> <p>This file contains the hash of the latest commit. When you commit on a branch, Git writes a new commit object and moves this pointer forward.</p> <p>For example:</p> <pre><code>refs/heads/main \u2192 &lt;commit_hash_A&gt;\n</code></pre> <p>Create a new commit \u2192 Git creates <code>&lt;commit_hash_B&gt;</code> and updates:</p> <pre><code>refs/heads/main \u2192 &lt;commit_hash_B&gt;\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#2-head-the-current-branch","title":"\ud83d\udd01 2. HEAD: The Current Branch","text":"<p><code>.git/HEAD</code> is a symbolic reference that tells Git which branch is currently checked out. For example:</p> <pre><code>ref: refs/heads/main\n</code></pre> <p>If you create a detached HEAD state:</p> <pre><code>git checkout &lt;commit_hash&gt;\n</code></pre> <p>then <code>.git/HEAD</code> contains:</p> <pre><code>&lt;commit_hash&gt;\n</code></pre> <p>which means you\u2019re no longer on a branch\u2014your working directory reflects that specific commit.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#3-creating-and-switching-branches","title":"\ud83c\udf3f 3. Creating and Switching Branches","text":""},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#create-a-branch","title":"Create a branch:","text":"<pre><code>git branch featureX\n</code></pre> <p>This creates <code>.git/refs/heads/featureX</code> pointing to the current commit.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#switch-to-it","title":"Switch to it:","text":"<pre><code>git checkout featureX\n</code></pre> <p>Or do both at once:</p> <pre><code>git checkout -b featureX\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#new-style-using-switch-recommended-in-modern-git","title":"New style using <code>switch</code> (recommended in modern Git):","text":"<pre><code>git switch -c featureX\n</code></pre> <p>This is cleaner and explicitly intended for switching branches.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#4-tracking-remote-branches","title":"\ud83d\udd17 4. Tracking Remote Branches","text":"<p>Tracking links local branches to remote counterparts.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#when-you-clone-a-repo","title":"When you clone a repo:","text":"<p>Remote branches are stored in:</p> <pre><code>.git/refs/remotes/origin/&lt;branch&gt;\n</code></pre> <p>e.g.,</p> <pre><code>origin/main\norigin/featureX\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#create-a-tracking-branch-manually","title":"Create a tracking branch manually:","text":"<pre><code>git checkout --track origin/featureX\n</code></pre> <p>This creates a local branch <code>featureX</code> and sets its upstream to <code>origin/featureX</code>.</p> <p>Internally:</p> <ul> <li>Local: <code>.git/refs/heads/featureX</code></li> <li>Tracking set via <code>.git/config</code>:</li> </ul> <pre><code>[branch \"featureX\"]\n    remote = origin\n    merge = refs/heads/featureX\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#or-with-switch","title":"Or with <code>switch</code>:","text":"<pre><code>git switch -c featureX --track origin/featureX\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#or-with-push","title":"Or with <code>push</code>:","text":"<pre><code>git push -u origin featureX\n</code></pre> <p>This uploads the branch and sets the upstream. The <code>-u</code> (or <code>--set-upstream</code>) flag ensures future <code>git push</code> and <code>git pull</code> commands will know where to sync.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#5-renaming-branches","title":"\u270f\ufe0f 5. Renaming Branches","text":""},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#locally","title":"Locally:","text":"<pre><code>git branch -m oldname newname\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#remotely","title":"Remotely:","text":"<pre><code>git push origin :oldname          # deletes old branch from remote\ngit push -u origin newname        # pushes new and sets upstream\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#6-working-with-remote-branches","title":"\ud83c\udf0d 6. Working with Remote Branches","text":""},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#view-remote-branches","title":"View remote branches:","text":"<pre><code>git branch -r\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#fetch-all-updates","title":"Fetch all updates:","text":"<pre><code>git fetch origin\n</code></pre> <p>This updates your remote tracking branches (<code>origin/main</code>, etc.), but does not change your working directory.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#fetch-a-specific-remote-branch","title":"Fetch a specific remote branch:","text":"<pre><code>git fetch origin featureX:featureX-local\n</code></pre> <p>This downloads <code>origin/featureX</code> and creates (or updates) a local branch <code>featureX-local</code>.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#7-merge-pull-and-tracking-relationships","title":"\ud83d\udd00 7. Merge, Pull, and Tracking Relationships","text":"<p>Assume you are on <code>featureX</code>, tracking <code>origin/featureX</code>.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#pull-fetch-merge","title":"Pull (fetch + merge):","text":"<pre><code>git pull\n</code></pre> <p>works without arguments only because of the tracking relationship.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#merge-manually","title":"Merge manually:","text":"<pre><code>git fetch origin\ngit merge origin/featureX\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#view-upstreams","title":"View upstreams:","text":"<pre><code>git branch -vv\n</code></pre> <p>shows each local branch and what it tracks.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#8-comparing-branches","title":"\ud83d\udd0d 8. Comparing Branches","text":"<pre><code>git diff branchA..branchB\n</code></pre> <p>shows what\u2019s in <code>branchB</code> but not in <code>branchA</code>.</p> <p>For example:</p> <pre><code>git diff main..featureX\n</code></pre> <p>Use logs to compare commits:</p> <pre><code>git log main..featureX         # commits in featureX not in main\ngit log featureX..main         # commits in main not in featureX\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#9-understanding-originbranch","title":"\ud83d\udccc 9. Understanding <code>origin/&lt;branch&gt;</code>","text":"<p>Remote-tracking branches (like <code>origin/featureX</code>) are read-only bookmarks that remember the state of branches on the remote the last time you fetched.</p> <p>They are stored under:</p> <pre><code>.git/refs/remotes/origin/\n</code></pre> <p>Git never writes to them during local commits\u2014they only change during fetch or pull.</p> <p>They allow safe comparisons like:</p> <pre><code>git diff origin/featureX        # what changed locally since last push\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#10-pushing-branches","title":"\ud83d\udce4 10. Pushing Branches","text":""},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#to-share-a-local-branch","title":"To share a local branch:","text":"<pre><code>git push origin featureX\n</code></pre> <p>This creates <code>origin/featureX</code>.</p>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#to-also-set-upstream","title":"To also set upstream:","text":"<pre><code>git push -u origin featureX\n</code></pre> <p>From now on:</p> <pre><code>git push        # knows where to push\ngit pull        # knows what to merge\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#deleting-a-branch-from-remote","title":"Deleting a branch from remote:","text":"<pre><code>git push origin --delete featureX\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#11-tracking-vs-non-tracking-branches","title":"\ud83d\udcda 11. Tracking vs. Non-Tracking Branches","text":""},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#tracked-branch","title":"Tracked Branch:","text":"<ul> <li>Has an associated upstream.</li> <li>Allows <code>git push</code> and <code>git pull</code> with no arguments.</li> <li>Displays helpful status like \u201cyour branch is 2 commits ahead\u201d.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#non-tracked-branch","title":"Non-Tracked Branch:","text":"<ul> <li>You must explicitly specify remote and branch name every time.</li> <li>More typing; no automatic pull/push target.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#set-upstream-manually","title":"Set upstream manually:","text":"<pre><code>git branch --set-upstream-to=origin/featureX featureX\n</code></pre> <p>Or simply:</p> <pre><code>git push -u origin featureX\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#12-cleaning-up-branches","title":"\ud83e\uddf9 12. Cleaning Up Branches","text":""},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#delete-local-branch","title":"Delete local branch:","text":"<pre><code>git branch -d featureX        # safe delete\ngit branch -D featureX        # force delete\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#delete-remote","title":"Delete remote:","text":"<pre><code>git push origin --delete featureX\n</code></pre> <p>To prune deleted remote branches from your local repo:</p> <pre><code>git fetch --prune\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#13-practical-tips-and-flow","title":"\ud83d\udd27 13. Practical Tips and Flow","text":""},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#starting-a-new-feature-from-main","title":"Starting a new feature from main:","text":"<pre><code>git checkout main\ngit pull                      # get latest\ngit checkout -b feature/search-bar\n# or\ngit switch -c feature/search-bar\n</code></pre> <p>Do your work \u2192 Commit \u2192 Push:</p> <pre><code>git push -u origin feature/search-bar\n</code></pre> <p>Merge later via pull request or:</p> <pre><code>git checkout main\ngit pull\ngit merge feature/search-bar\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#14-key-internals-recap","title":"\ud83e\udde0 14. Key Internals Recap","text":"Concept Internal Representation Branch <code>.git/refs/heads/&lt;name&gt;</code> \u2192 commit hash HEAD <code>.git/HEAD</code> \u2192 <code>ref: refs/heads/&lt;branch&gt;</code> Remote branch <code>.git/refs/remotes/origin/&lt;branch&gt;</code> Tracking Stored in <code>.git/config</code> <code>[branch \"&lt;name&gt;\"]</code> section Switch <code>git switch -c</code> preferred for clarity Detached HEAD <code>.git/HEAD</code> directly stores commit hash"},{"location":"Progress/Quick%20Revision%20GIT/04%20-%20Branching/#summary","title":"\ud83e\udded Summary","text":"<p>Git\u2019s branching model provides both a high-level abstraction and a low-level transparent system. Understanding how branches are stored, switched, tracked, and synced with remotes will make you a far more effective and confident Git user. The key points:</p> <ul> <li>Branches are lightweight and cheap.</li> <li>Tracking relationships simplify <code>push</code>/<code>pull</code>.</li> <li>Use <code>git switch</code> over <code>checkout</code> for clarity.</li> <li>Use <code>-u</code> to set upstreams on first push.</li> <li>Remote branches are read-only bookmarks; update via <code>fetch</code>.</li> <li>Branching is safe: everything is just pointers to snapshots.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/","title":"\ud83d\udd00 Git Branching Strategies: Merging vs Rebasing in Detail","text":"<p>Git offers two primary ways to integrate changes from one branch into another:</p> <ul> <li><code>git merge</code>: combines histories while preserving their original structure.</li> <li><code>git rebase</code>: re-applies your commits onto another base, rewriting history.</li> </ul> <p>Each has unique effects on your repository and collaboration model. Understanding how they work and when to use which is critical for smooth Git workflows.</p>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#1-what-is-git-merge","title":"\ud83e\udded 1. What is Git Merge?","text":""},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#command","title":"\ud83d\udccc Command:","text":"<pre><code>git merge branchA\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#concept","title":"\ud83d\udd0d Concept:","text":"<ul> <li>You stay on <code>branchB</code>, and bring in all commits from <code>branchA</code>.</li> <li>Git creates a merge commit with two parents.</li> <li>The histories of both branches are preserved.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#example","title":"\ud83c\udf33 Example:","text":"<p>Suppose you are on <code>feature</code> and you merge <code>main</code> into it:</p> <pre><code>git checkout feature\ngit merge main\n</code></pre> <p>This brings all new commits from <code>main</code> into <code>feature</code>, producing a merge commit like this:</p> <pre><code>*   M  \u2190 merge commit\n|\\\n| * C  \u2190 latest on main\n| * B\n* | A  \u2190 last commit on feature\n|/\n* P   \u2190 common ancestor\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#2-what-is-git-rebase","title":"\ud83d\udd04 2. What is Git Rebase?","text":""},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#command_1","title":"\ud83d\udccc Command:","text":"<pre><code>git rebase main\n</code></pre> <p>This means: \u201cTake all my current commits and replay them on top of <code>main</code>.\u201d</p>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#concept_1","title":"\ud83d\udd0d Concept:","text":"<ul> <li>Git finds the common ancestor of the two branches.</li> <li>Your commits are rebased (re-written with new parents) atop the tip of <code>main</code>.</li> <li>No merge commit is created.</li> <li>History becomes linear.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#example_1","title":"\ud83c\udf33 Example:","text":"<pre><code>git checkout feature\ngit rebase main\n</code></pre> <pre><code>Before:\n* A  \u2190 on feature\n|\n* P  \u2190 common ancestor\n|\n* B  \u2190 on main\n\nAfter:\n* A'  \u2190 rewritten version of A (based on B)\n* B\n* P\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#3-key-differences-between-merge-and-rebase","title":"\ud83d\udd0d 3. Key Differences Between Merge and Rebase","text":"Feature <code>git merge</code> <code>git rebase</code> History Non-linear (shows divergence) Linear (one path) Commit Hashes Preserved Rewritten Conflict Resolution Once during merge Once per commit if conflicts occur Merge Commit Yes No Safety (Collab) Safe for shared branches Dangerous on public branches Simplicity Easier to understand Cleaner history, but riskier"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#4-perils-of-rebasing-rewriting-history","title":"\u26a0\ufe0f 4. Perils of Rebasing (Rewriting History)","text":"<p>Rebase rewrites commits. Never rebase a public branch that others may be using.</p>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#problem","title":"\ud83d\udd25 Problem:","text":"<p>If you rebase and force-push a branch that others already pulled from, they will get duplicate commits and face divergent history, resulting in:</p> <ul> <li>Duplicate commits</li> <li>Conflicts when they try to push</li> <li>Broken CI/CD if it runs on a stale branch</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#rule-of-thumb","title":"\ud83d\udca1 Rule of Thumb:","text":"<p>Only rebase your own local, unpublished branches.</p> <p>Use <code>git merge</code> for shared/public branches.</p>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#5-collaborative-workflow-example-two-developers","title":"\ud83e\udd1d 5. Collaborative Workflow Example: Two Developers","text":""},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#scenario","title":"Scenario:","text":"<ul> <li>Both developers branch off <code>main</code>.</li> <li>Dev A makes commit <code>A1</code>, Dev B makes <code>B1</code>, <code>B2</code>.</li> <li>Dev A merges into <code>main</code>, Dev B now needs to sync.</li> </ul> <p>Let\u2019s visualize this with Mermaid.</p>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#mermaid-diagram-merge-flow","title":"\ud83d\udcca Mermaid Diagram: Merge Flow","text":"<pre><code>gitGraph\n   commit id: \"P\" tag: \"main\"\n   branch devA\n   checkout devA\n   commit id: \"A1\"\n   branch devB\n   checkout devB\n   commit id: \"B1\"\n   commit id: \"B2\"\n   checkout main\n   merge devA id: \"M1\"\n   checkout devB\n   merge main id: \"M2\"\n</code></pre> <p>\ud83d\udca1 Here:</p> <ul> <li>Dev A merges first.</li> <li>Dev B merges updated main into their branch to get A\u2019s work.</li> <li>Final <code>git merge devB</code> brings everything into main.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#mermaid-diagram-rebase-flow","title":"\ud83d\udcca Mermaid Diagram: Rebase Flow","text":"<pre><code>gitGraph\n   commit id: \"P\" tag: \"main\"\n   branch devA\n   checkout devA\n   commit id: \"A1\"\n   branch devB\n   checkout devB\n   commit id: \"B1\"\n   commit id: \"B2\"\n   checkout main\n   merge devA id: \"M1\"\n   checkout devB\n   rebase main\n   checkout main\n   merge devB id: \"M2\"\n</code></pre> <p>\ud83d\udca1 Here:</p> <ul> <li>Dev A merges as before.</li> <li>Dev B rebases on top of updated <code>main</code> (including A1).</li> <li>Git replays B1, B2 on top of M1.</li> <li>Final merge is linear and clean.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#6-common-commands-in-practice","title":"\ud83d\udee0 6. Common Commands in Practice","text":""},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#merging-main-into-feature","title":"Merging main into feature:","text":"<pre><code>git checkout feature\ngit merge main\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#rebasing-feature-onto-main","title":"Rebasing feature onto main:","text":"<pre><code>git checkout feature\ngit fetch origin\ngit rebase origin/main\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#abort-a-rebase-in-progress","title":"Abort a rebase in progress:","text":"<pre><code>git rebase --abort\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#skip-a-commit-during-rebase","title":"Skip a commit during rebase:","text":"<pre><code>git rebase --skip\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#resolve-conflict-and-continue","title":"Resolve conflict and continue:","text":"<pre><code># fix conflicts\ngit add .\ngit rebase --continue\n</code></pre>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#7-rebase-with-interactive-mode","title":"\ud83d\udccc 7. Rebase with Interactive Mode","text":"<p>Interactive rebase allows editing, squashing, or reordering commits:</p> <pre><code>git rebase -i HEAD~3\n</code></pre> <p>Editor opens:</p> <pre><code>pick a1 First commit\npick a2 Second commit\npick a3 Third commit\n</code></pre> <p>Change to:</p> <pre><code>pick a1 First commit\nsquash a2 Second commit\npick a3 Third commit\n</code></pre> <p>This will combine <code>a1</code> and <code>a2</code> into a single commit.</p>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#8-best-practices-and-recommendations","title":"\ud83e\udde0 8. Best Practices and Recommendations","text":""},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#when-to-use-merge","title":"\u2705 When to Use <code>merge</code>:","text":"<ul> <li>Collaborating on a shared branch.</li> <li>Maintaining history integrity.</li> <li>Long-lived branches with many contributors.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#when-to-use-rebase","title":"\u2705 When to Use <code>rebase</code>:","text":"<ul> <li>Before merging a feature branch into <code>main</code> (only if local).</li> <li>To clean up your own commits before PR.</li> <li>For linear, readable history.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#avoid","title":"\u26a0\ufe0f Avoid:","text":"<ul> <li>Rebasing <code>main</code>, <code>develop</code>, or any shared branch.</li> <li>Force-pushing rebased branches unless coordinated.</li> </ul>"},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#internals-recap","title":"\ud83e\uddee Internals Recap","text":"Operation What Happens Internally <code>merge</code> Git creates a new merge commit with two parents. <code>rebase</code> Git creates new commits replaying changes onto the new base. <code>HEAD</code> Moved to the latest commit after merge or rebase. Conflicts Resolved via index; resolved commits are staged then continued."},{"location":"Progress/Quick%20Revision%20GIT/05%20-%20Merging/#summary","title":"\ud83e\udde9 Summary","text":"<p>Both merging and rebasing are essential tools. The choice between them is not absolute but contextual.</p> <ul> <li>Use merge when preserving branch topology is important.</li> <li>Use rebase for clarity in solo workflows or when preparing clean pull requests.</li> <li>Always be cautious when working with shared branches: rebasing can disrupt your team\u2019s history.</li> </ul> <p>Would you like a combined real-world workflow diagram using multiple remotes, forks, and pull requests next?</p>"},{"location":"Progress/Quick%20Revision%20GIT/temp/","title":"Temp","text":""},{"location":"Progress/Quick%20Revision%20GIT/temp/#10-easy-sentences-bolded-adjectives-longer-sentences","title":"\ud83d\udfe2 10 Easy Sentences (Bolded Adjectives, Longer Sentences)","text":"<ol> <li>The red balloon floated high above the tall trees while the gentle wind carried it across the sunny sky.</li> <li>She wore a pretty dress with shiny buttons and pink flowers that made everyone smile.</li> <li>I have a small dog who loves to chase fluttering butterflies in the green garden every bright morning.</li> <li>He is a kind boy who always shares his favorite toys and helps his younger sister with fun puzzles.</li> <li>The blue car zoomed past us quickly as we walked along the quiet and dusty road.</li> <li>On a hot summer day, we built a huge sandcastle on the sandy beach and drank cold juice under a striped umbrella.</li> <li>We saw a happy puppy wagging its fluffy tail and playing with a bouncy ball in the green park.</li> <li>The cold water from the hose made us scream and laugh as we splashed around in the warm backyard.</li> <li>My dad has a funny hat that looks like a giant watermelon and makes everyone giggle.</li> <li>We ate some sweet, juicy strawberries that we picked from Grandma\u2019s sunny garden.</li> </ol>"},{"location":"Progress/Quick%20Revision%20GIT/temp/#10-medium-sentences-all-adjectives-bolded-richer-vocabulary","title":"\ud83d\udfe1 10 Medium Sentences (All Adjectives Bolded, Richer Vocabulary)","text":"<ol> <li>The brilliant stars sparkled like tiny diamonds in the dark sky as we lay on a soft blanket telling silly stories.</li> <li>She gave a generous gift wrapped in shiny paper, filled with her favorite toys and colorful books for her excited friend.</li> <li>The noisy parrot kept squawking silly words while dancing on its polished perch in the crowded pet store.</li> <li>He solved the puzzle with a clever grin, knowing exactly where each missing piece needed to go.</li> <li>We watched a peaceful sunset where the sky turned orange, pink, and gold before the quiet night arrived.</li> <li>Her colorful painting of a rainbow jungle made the entire boring art room look more cheerful and alive.</li> <li>My cat is very curious and always sneaks into dark, mysterious closets and old bags to explore what\u2019s inside.</li> <li>That was a delicious sandwich made with fresh bread, crunchy lettuce, and melted cheese.</li> <li>The garden was filled with fragrant flowers that made the air smell like sweet candy and soft perfume.</li> <li>He wore a neat uniform with shiny shoes and a golden badge that made him feel like a real superhero.</li> </ol>"},{"location":"Progress/Quick%20Revision%20GIT/temp/#10-difficult-sentences-bolded-all-adjectives-enhanced-imagery","title":"\ud83d\udd34 10 Difficult Sentences (Bolded All Adjectives, Enhanced Imagery)","text":"<ol> <li>The majestic elephant walked slowly and gracefully through the lush forest, with colorful birds flying above and playful monkeys swinging from the tall trees.</li> <li>She gave a meticulous explanation of how dangerous volcanoes erupt, using a handmade model with glowing, red lava.</li> <li>We climbed the rugged, steep mountain trail, stepping over sharp rocks and looking out over the misty, distant valley.</li> <li>His voice had a melodious, calm tone, like a gentle song that made everyone in the quiet room stop and listen.</li> <li>The intricate design on the enormous cake showed tiny sugar flowers and delicate patterns that looked like royal lace.</li> <li>It was a thrilling adventure through the enchanted cave, where glowing crystals lit up the path and mysterious sounds echoed around us.</li> <li>They listened to a fascinating story about ancient, hidden treasures, tattered maps, and greedy pirates who vanished long ago.</li> <li>The generational clock on the wall had ticked for over a hundred years, passed down from wise grandparents to eager grandchildren.</li> <li>She wore an elegant, sparkling dress that shimmered like silver starlight as she walked across the wooden floor.</li> <li>The dragon had glimmering, iridescent scales that sparkled in the bright sunlight, looking like royal armor made from rare jewels.</li> </ol>"},{"location":"Progress/Quick%20Revision%20GIT/temp/#adjective-spotting-exercise","title":"\u270f\ufe0f Adjective Spotting Exercise","text":"<p>Now try to find and list the adjectives in each sentence below. No bolding this time\u2014your mission is to spot them!</p> <ol> <li>The wise owl flew over the silent trees, looking for something to eat in the moonlight.</li> <li>My brother wore his torn jeans and dirty shoes while helping Dad in the muddy garden.</li> <li>We watched a funny and exciting movie last night that made us laugh until bedtime.</li> <li>The glowing stars filled the clear sky as we sat by the campfire and roasted marshmallows.</li> <li>She has a bright idea for the science fair that might even win her a shiny blue ribbon.</li> <li>Our new puppy is small but very energetic, always running in circles and chewing on socks.</li> <li>He found an old coin with strange markings buried under the soft earth in the backyard.</li> </ol>"}]}